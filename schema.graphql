"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
 A keystone list
"""
type Author {
  id: ID!
  name: String
  avatar: ImageFieldOutput
  email: String
  stackOverflow: String
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  stackOverflow: String
  stackOverflow_not: String
  stackOverflow_contains: String
  stackOverflow_not_contains: String
  stackOverflow_starts_with: String
  stackOverflow_not_starts_with: String
  stackOverflow_ends_with: String
  stackOverflow_not_ends_with: String
  stackOverflow_i: String
  stackOverflow_not_i: String
  stackOverflow_contains_i: String
  stackOverflow_not_contains_i: String
  stackOverflow_starts_with_i: String
  stackOverflow_not_starts_with_i: String
  stackOverflow_ends_with_i: String
  stackOverflow_not_ends_with_i: String
  stackOverflow_in: [String]
  stackOverflow_not_in: [String]
}

input AuthorWhereUniqueInput {
  id: ID
  name: String
}

enum SortAuthorsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  stackOverflow_ASC
  stackOverflow_DESC
}

input AuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  stackOverflow: OrderDirection
}

input AuthorUpdateInput {
  name: String
  avatar: ImageFieldInput
  email: String
  stackOverflow: String
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input AuthorsUpdateInput {
  id: ID!
  data: AuthorUpdateInput
}

input AuthorCreateInput {
  name: String
  avatar: ImageFieldInput
  email: String
  stackOverflow: String
}

input AuthorsCreateInput {
  data: AuthorCreateInput
}

"""
 A keystone list
"""
type Notification {
  id: ID!
  name: String
  isVisible: Boolean
  order: Int
  content: Notification_content_DocumentField
}

type Notification_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  isVisible: Boolean
  isVisible_not: Boolean
  order: Int
  order_not: Int
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  order_in: [Int]
  order_not_in: [Int]
}

input NotificationWhereUniqueInput {
  id: ID
  name: String
  order: Int
}

enum SortNotificationsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  isVisible_ASC
  isVisible_DESC
  order_ASC
  order_DESC
}

input NotificationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isVisible: OrderDirection
  order: OrderDirection
}

input NotificationUpdateInput {
  name: String
  isVisible: Boolean
  order: Int
  content: JSON
}

input NotificationsUpdateInput {
  id: ID!
  data: NotificationUpdateInput
}

input NotificationCreateInput {
  name: String
  isVisible: Boolean
  order: Int
  content: JSON
}

input NotificationsCreateInput {
  data: NotificationCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Author item.
  """
  createAuthor(data: AuthorCreateInput): Author

  """
   Create multiple Author items.
  """
  createAuthors(data: [AuthorsCreateInput]): [Author]

  """
   Update a single Author item by ID.
  """
  updateAuthor(id: ID!, data: AuthorUpdateInput): Author

  """
   Update multiple Author items by ID.
  """
  updateAuthors(data: [AuthorsUpdateInput]): [Author]

  """
   Delete a single Author item by ID.
  """
  deleteAuthor(id: ID!): Author

  """
   Delete multiple Author items by ID.
  """
  deleteAuthors(ids: [ID!]): [Author]

  """
   Create a single Notification item.
  """
  createNotification(data: NotificationCreateInput): Notification

  """
   Create multiple Notification items.
  """
  createNotifications(data: [NotificationsCreateInput]): [Notification]

  """
   Update a single Notification item by ID.
  """
  updateNotification(id: ID!, data: NotificationUpdateInput): Notification

  """
   Update multiple Notification items by ID.
  """
  updateNotifications(data: [NotificationsUpdateInput]): [Notification]

  """
   Delete a single Notification item by ID.
  """
  deleteNotification(id: ID!): Notification

  """
   Delete multiple Notification items by ID.
  """
  deleteNotifications(ids: [ID!]): [Notification]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all Author items which match the where clause.
  """
  allAuthors(
    where: AuthorWhereInput! = {}
    search: String
    sortBy: [SortAuthorsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AuthorOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Author!]

  """
   Search for the Author item with the matching ID.
  """
  Author(where: AuthorWhereUniqueInput!): Author

  """
   Perform a meta-query on all Author items which match the where clause.
  """
  _allAuthorsMeta(
    where: AuthorWhereInput! = {}
    search: String
    sortBy: [SortAuthorsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AuthorOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use authorsCount instead."
    )
  authorsCount(where: AuthorWhereInput! = {}): Int

  """
   Search for all Notification items which match the where clause.
  """
  allNotifications(
    where: NotificationWhereInput! = {}
    search: String
    sortBy: [SortNotificationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [NotificationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Notification!]

  """
   Search for the Notification item with the matching ID.
  """
  Notification(where: NotificationWhereUniqueInput!): Notification

  """
   Perform a meta-query on all Notification items which match the where clause.
  """
  _allNotificationsMeta(
    where: NotificationWhereInput! = {}
    search: String
    sortBy: [SortNotificationsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [NotificationOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use notificationsCount instead."
    )
  notificationsCount(where: NotificationWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
